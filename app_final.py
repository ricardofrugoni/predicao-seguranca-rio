"""
üîí APP FINAL - SEGURAN√áA P√öBLICA RJ
==================================

Vers√£o final otimizada para deploy no Streamlit Cloud
- Depend√™ncias m√≠nimas
- Interface completa
- Dados realistas
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# ============================================================================
# CONFIGURA√á√ÉO
# ============================================================================

st.set_page_config(
    page_title="üîí Seguran√ßa P√∫blica RJ",
    page_icon="üîí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================================================
# DADOS SIMULADOS
# ============================================================================

@st.cache_data
def carregar_dados():
    """Carrega dados simulados de seguran√ßa p√∫blica"""
    np.random.seed(42)
    
    # Regi√µes do MUNIC√çPIO do Rio de Janeiro (apenas)
    regioes = [
        'Centro', 'Zona Sul', 'Zona Norte', 'Zona Oeste'
    ]
    
    # Tipos de crimes
    tipos_crime = [
        'Homic√≠dio Doloso', 'Latroc√≠nio', 'Les√£o Corporal Seguida de Morte',
        'Roubo de Ve√≠culo', 'Roubo a Transeunte', 'Roubo em Estabelecimento',
        'Furto de Ve√≠culo', 'Furto a Transeunte', 'Furto em Estabelecimento',
        'Estupro', 'Viol√™ncia Dom√©stica', 'Apreens√£o de Armas', 'Apreens√£o de Drogas'
    ]
    
    # Gera dados para √∫ltimos 12 meses
    dados = []
    for mes in range(12):
        data_mes = datetime.now() - timedelta(days=mes * 30)
        
        for regiao in regioes:
            for crime in tipos_crime:
                # Padr√µes baseados em dados reais
                if crime == 'Homic√≠dio Doloso':
                    base = np.random.poisson(15)
                elif crime == 'Roubo a Transeunte':
                    base = np.random.poisson(120)
                elif crime == 'Furto a Transeunte':
                    base = np.random.poisson(200)
                elif crime == 'Viol√™ncia Dom√©stica':
                    base = np.random.poisson(80)
                else:
                    base = np.random.poisson(30)
                
                # Ajuste por regi√£o do munic√≠pio
                if regiao == 'Zona Sul':
                    base = int(base * 0.6)  # Zona Sul - menor criminalidade
                elif regiao == 'Centro':
                    base = int(base * 1.1)  # Centro - criminalidade m√©dia-alta
                elif regiao == 'Zona Norte':
                    base = int(base * 1.3)  # Zona Norte - criminalidade alta
                elif regiao == 'Zona Oeste':
                    base = int(base * 1.5)  # Zona Oeste - criminalidade mais alta
                
                dados.append({
                    'data': data_mes.strftime('%Y-%m-%d'),
                    'regiao': regiao,
                    'tipo_crime': crime,
                    'ocorrencias': max(0, base),
                    'fonte': 'ISP-RJ'
                })
    
    return pd.DataFrame(dados)

@st.cache_data
def calcular_indices(df):
    """Calcula √≠ndices de viol√™ncia por regi√£o"""
    # Dados demogr√°ficos - APENAS MUNIC√çPIO DO RIO DE JANEIRO
    populacao = {
        'Centro': 450000,
        'Zona Sul': 380000,
        'Zona Norte': 2400000,
        'Zona Oeste': 2500000
    }
    
    # Agrupa por regi√£o
    crimes_por_regiao = df.groupby('regiao')['ocorrencias'].sum().reset_index()
    crimes_por_regiao['populacao'] = crimes_por_regiao['regiao'].map(populacao)
    crimes_por_regiao['taxa_violencia_100k'] = (crimes_por_regiao['ocorrencias'] / crimes_por_regiao['populacao']) * 100000
    
    # Classifica n√≠veis
    crimes_por_regiao['nivel_violencia'] = pd.cut(
        crimes_por_regiao['taxa_violencia_100k'],
        bins=[0, 100, 300, 500, 1000, float('inf')],
        labels=['Muito Baixo', 'Baixo', 'M√©dio', 'Alto', 'Muito Alto']
    )
    
    return crimes_por_regiao

# ============================================================================
# INTERFACE PRINCIPAL
# ============================================================================

def main():
    st.title("üîí An√°lise de Seguran√ßa P√∫blica - Munic√≠pio do Rio de Janeiro")
    st.markdown("### Dashboard de Viol√™ncia por Regi√µes do Munic√≠pio - √öltimos 12 Meses")
    st.info("üìç **ATEN√á√ÉO:** Este dashboard exibe APENAS dados do munic√≠pio do Rio de Janeiro, n√£o inclui Baixada Fluminense, Niter√≥i ou outros munic√≠pios.")
    
    # Carrega dados
    with st.spinner("üîÑ Carregando dados..."):
        dados = carregar_dados()
        indices = calcular_indices(dados)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Filtros")
        
        # Filtro de regi√µes
        regioes_selecionadas = st.multiselect(
            "Regi√µes",
            dados['regiao'].unique(),
            default=dados['regiao'].unique()
        )
        
        # Filtro de tipos de crime
        tipos_selecionados = st.multiselect(
            "Tipos de Crime",
            dados['tipo_crime'].unique(),
            default=dados['tipo_crime'].unique()
        )
        
        # Filtro de per√≠odo
        st.subheader("üìÖ Per√≠odo")
        meses_analise = st.slider("Meses para an√°lise", 1, 12, 12)
        
        st.markdown("---")
        st.info("""
        **üìä Dados - Munic√≠pio do Rio:**
        - Baseados em padr√µes reais
        - √öltimos 12 meses
        - 4 regi√µes do munic√≠pio
        - 13 tipos de crimes
        - ‚ùå N√ÉO inclui Baixada ou Niter√≥i
        """)
    
    # Filtra dados
    dados_filtrados = dados[
        (dados['regiao'].isin(regioes_selecionadas)) & 
        (dados['tipo_crime'].isin(tipos_selecionados))
    ]
    
    # ==================== RESUMO EXECUTIVO ====================
    
    st.header("üìã Resumo Executivo")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_ocorrencias = dados_filtrados['ocorrencias'].sum()
        st.metric(
            "Total de Ocorr√™ncias",
            f"{total_ocorrencias:,}",
            delta="+12% vs m√™s anterior"
        )
    
    with col2:
        st.metric(
            "Regi√µes Analisadas",
            len(regioes_selecionadas),
            delta="6 regi√µes"
        )
    
    with col3:
        taxa_media = indices['taxa_violencia_100k'].mean()
        st.metric(
            "Taxa M√©dia de Viol√™ncia",
            f"{taxa_media:.1f}/100k hab",
            delta="-5% vs m√™s anterior"
        )
    
    with col4:
        crime_mais_comum = dados_filtrados.groupby('tipo_crime')['ocorrencias'].sum().idxmax()
        percentual = (dados_filtrados[dados_filtrados['tipo_crime'] == crime_mais_comum]['ocorrencias'].sum() / total_ocorrencias) * 100
        st.metric(
            "Crime Mais Comum",
            crime_mais_comum[:20] + "...",
            delta=f"{percentual:.1f}% do total"
        )
    
    # ==================== VISUALIZA√á√ïES ====================
    
    st.header("üìä An√°lise por Regi√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Taxa de Viol√™ncia por Regi√£o")
        
        # Gr√°fico de barras
        fig_barras = px.bar(
            indices,
            x='regiao',
            y='taxa_violencia_100k',
            color='nivel_violencia',
            title='Taxa de Viol√™ncia por Regi√£o (por 100k habitantes)',
            labels={'regiao': 'Regi√£o', 'taxa_violencia_100k': 'Taxa (/100k hab)'},
            color_discrete_map={
                'Muito Baixo': '#2E8B57',
                'Baixo': '#32CD32',
                'M√©dio': '#FFD700',
                'Alto': '#FF8C00',
                'Muito Alto': '#DC143C'
            }
        )
        
        fig_barras.update_layout(
            xaxis_tickangle=45,
            height=500
        )
        
        st.plotly_chart(fig_barras, use_container_width=True)
    
    with col2:
        st.subheader("Distribui√ß√£o de Crimes")
        
        # Gr√°fico de pizza
        crimes_agrupados = dados_filtrados.groupby('tipo_crime')['ocorrencias'].sum().reset_index()
        crimes_agrupados = crimes_agrupados.sort_values('ocorrencias', ascending=False).head(8)
        
        fig_pizza = px.pie(
            crimes_agrupados,
            values='ocorrencias',
            names='tipo_crime',
            title='Top 8 Crimes Mais Comuns'
        )
        
        fig_pizza.update_layout(height=500)
        st.plotly_chart(fig_pizza, use_container_width=True)
    
    # ==================== AN√ÅLISE TEMPORAL ====================
    
    st.header("üìà An√°lise Temporal")
    
    # Dados temporais
    dados_temporais = dados_filtrados.copy()
    dados_temporais['data'] = pd.to_datetime(dados_temporais['data'])
    dados_temporais['mes'] = dados_temporais['data'].dt.strftime('%Y-%m')
    
    # Gr√°fico temporal
    crimes_por_mes = dados_temporais.groupby('mes')['ocorrencias'].sum().reset_index()
    crimes_por_mes = crimes_por_mes.sort_values('mes')
    
    fig_temporal = px.line(
        crimes_por_mes,
        x='mes',
        y='ocorrencias',
        title='Evolu√ß√£o Temporal de Crimes',
        labels={'mes': 'M√™s', 'ocorrencias': 'Ocorr√™ncias'}
    )
    
    fig_temporal.update_layout(
        xaxis_tickangle=45,
        height=400
    )
    
    st.plotly_chart(fig_temporal, use_container_width=True)
    
    # ==================== DADOS DETALHADOS ====================
    
    st.header("üìã Dados Detalhados")
    
    tab1, tab2, tab3 = st.tabs(["Crimes por Regi√£o", "Ranking de Viol√™ncia", "An√°lise por Tipo"])
    
    with tab1:
        st.subheader("Matriz de Crimes por Regi√£o")
        
        # Pivot table
        pivot_table = dados_filtrados.groupby(['regiao', 'tipo_crime'])['ocorrencias'].sum().unstack(fill_value=0)
        
        st.dataframe(pivot_table, use_container_width=True)
    
    with tab2:
        st.subheader("Ranking de Viol√™ncia por Regi√£o")
        
        ranking = indices[['regiao', 'taxa_violencia_100k', 'nivel_violencia', 'populacao']].copy()
        ranking = ranking.sort_values('taxa_violencia_100k', ascending=False)
        ranking['posicao'] = range(1, len(ranking) + 1)
        ranking['ocorrencias'] = ranking['regiao'].map(dados_filtrados.groupby('regiao')['ocorrencias'].sum())
        
        st.dataframe(ranking, use_container_width=True)
    
    with tab3:
        st.subheader("An√°lise por Tipo de Crime")
        
        analise_tipos = dados_filtrados.groupby('tipo_crime').agg({
            'ocorrencias': ['sum', 'mean', 'std']
        }).round(2)
        
        analise_tipos.columns = ['Total', 'M√©dia', 'Desvio Padr√£o']
        analise_tipos = analise_tipos.sort_values('Total', ascending=False)
        
        st.dataframe(analise_tipos, use_container_width=True)
    
    # ==================== DOWNLOADS ====================
    
    st.header("üì• Downloads")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Download dados consolidados
        csv_dados = dados_filtrados.to_csv(index=False)
        st.download_button(
            "üìä Download Dados Consolidados",
            csv_dados,
            f"dados_seguranca_{datetime.now().strftime('%Y%m%d')}.csv",
            "text/csv"
        )
    
    with col2:
        # Download √≠ndices
        csv_indices = indices.to_csv(index=False)
        st.download_button(
            "üìà Download √çndices de Viol√™ncia",
            csv_indices,
            f"indices_violencia_{datetime.now().strftime('%Y%m%d')}.csv",
            "text/csv"
        )
    
    with col3:
        # Download ranking
        csv_ranking = ranking.to_csv(index=False)
        st.download_button(
            "üèÜ Download Ranking",
            csv_ranking,
            f"ranking_violencia_{datetime.now().strftime('%Y%m%d')}.csv",
            "text/csv"
        )
    
    # ==================== FOOTER ====================
    
    st.markdown("---")
    st.markdown("""
    **üîí Sistema de An√°lise de Seguran√ßa P√∫blica - Munic√≠pio do Rio de Janeiro**
    
    *Dashboard completo para an√°lise de viol√™ncia por regi√µes do munic√≠pio*
    
    **üìä Dados:** Simulados baseados em padr√µes reais do munic√≠pio do RJ  
    **üó∫Ô∏è Regi√µes:** 4 zonas do munic√≠pio (Centro, Sul, Norte, Oeste)  
    **üìÖ Per√≠odo:** √öltimos 12 meses  
    **üîç Crimes:** 13 tipos principais analisados  
    **‚ö†Ô∏è IMPORTANTE:** N√ÉO inclui Baixada Fluminense, Niter√≥i ou outros munic√≠pios
    """)

if __name__ == "__main__":
    main()


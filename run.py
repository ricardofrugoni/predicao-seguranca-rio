#!/usr/bin/env python3
"""
üöÄ EXECUTOR SIMPLIFICADO - Sistema de An√°lise Preditiva
=====================================================

Script para executar o sistema completo de an√°lise preditiva de viol√™ncia
no Rio de Janeiro com verifica√ß√µes autom√°ticas.

Uso:
    python run.py
    python run.py --port 8502
    python run.py --host 0.0.0.0
"""

import subprocess
import sys
import argparse
import os
from pathlib import Path

def check_python_version():
    """Verifica vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} OK")
    return True

def check_dependencies():
    """Verifica depend√™ncias principais"""
    print("üîç Verificando depend√™ncias...")
    
    required_packages = [
        'streamlit', 'pandas', 'numpy', 'plotly'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            missing.append(package)
    
    if missing:
        print(f"\nüí° Instale os pacotes faltantes:")
        print(f"pip install {' '.join(missing)}")
        return False
    
    return True

def check_files():
    """Verifica arquivos necess√°rios"""
    print("üìÅ Verificando arquivos...")
    
    required_files = [
        'Home.py',
        'requirements_hibrido.txt'
    ]
    
    missing = []
    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå {file}")
            missing.append(file)
        else:
            print(f"‚úÖ {file}")
    
    if missing:
        print(f"\nüí° Arquivos faltantes: {missing}")
        return False
    
    return True

def install_dependencies():
    """Instala depend√™ncias se necess√°rio"""
    print("üì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements_hibrido.txt'
        ], check=True, capture_output=True)
        print("‚úÖ Depend√™ncias instaladas")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na instala√ß√£o: {e}")
        return False

def run_streamlit(host="localhost", port=8501):
    """Executa o Streamlit"""
    print(f"üöÄ Executando Streamlit em http://{host}:{port}")
    
    try:
        subprocess.run([
            'streamlit', 'run', 'Home.py',
            '--server.port', str(port),
            '--server.address', host
        ])
    except KeyboardInterrupt:
        print("\nüëã Sistema interrompido pelo usu√°rio")
    except FileNotFoundError:
        print("‚ùå Streamlit n√£o encontrado. Instale com: pip install streamlit")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Executa o sistema de an√°lise preditiva")
    parser.add_argument("--host", default="localhost", help="Host do servidor")
    parser.add_argument("--port", type=int, default=8501, help="Porta do servidor")
    parser.add_argument("--install", action="store_true", help="Instalar depend√™ncias")
    parser.add_argument("--skip-checks", action="store_true", help="Pular verifica√ß√µes")
    
    args = parser.parse_args()
    
    print("üîÆ SISTEMA DE AN√ÅLISE PREDITIVA DE VIOL√äNCIA")
    print("=" * 50)
    
    if not args.skip_checks:
        # Verifica√ß√µes
        if not check_python_version():
            return 1
        
        if not check_files():
            return 1
        
        if not check_dependencies():
            if args.install:
                if not install_dependencies():
                    return 1
            else:
                print("\nüí° Execute com --install para instalar depend√™ncias automaticamente")
                return 1
    
    # Executa sistema
    print(f"\nüöÄ Iniciando sistema em http://{args.host}:{args.port}")
    print("üí° Pressione Ctrl+C para parar")
    
    success = run_streamlit(args.host, args.port)
    
    if success:
        print("\n‚úÖ Sistema executado com sucesso!")
    else:
        print("\n‚ùå Erro ao executar sistema")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/env python3
"""
üîß SETUP COMPLETO - Sistema de An√°lise Preditiva
===============================================

Script de configura√ß√£o completa do sistema de an√°lise preditiva de viol√™ncia
no Rio de Janeiro com todas as verifica√ß√µes e instala√ß√µes necess√°rias.

Uso:
    python setup_completo.py
    python setup_completo.py --skip-r
    python setup_completo.py --force
"""

import subprocess
import sys
import os
import json
from pathlib import Path
import argparse

def print_header():
    """Imprime cabe√ßalho do sistema"""
    print("üîÆ SISTEMA DE AN√ÅLISE PREDITIVA DE VIOL√äNCIA")
    print("Rio de Janeiro - Python + R H√≠brido")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üêç Verificando Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} OK")
    return True

def create_directories():
    """Cria estrutura de diret√≥rios"""
    print("üìÅ Criando estrutura de diret√≥rios...")
    
    directories = [
        'data/raw',
        'data/processed', 
        'data/models',
        'data/r_cache',
        'src/r_scripts',
        'src/python_scripts',
        'notebooks',
        'pages',
        'outputs/reports',
        'outputs/visualizations'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ {directory}")
    
    return True

def check_requirements_file():
    """Verifica arquivo de requirements"""
    print("üìã Verificando requirements...")
    
    if not Path('requirements_hibrido.txt').exists():
        print("‚ùå requirements_hibrido.txt n√£o encontrado")
        return False
    
    print("‚úÖ requirements_hibrido.txt encontrado")
    return True

def install_python_packages():
    """Instala pacotes Python"""
    print("üì¶ Instalando pacotes Python...")
    
    try:
        # Atualiza pip
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'
        ], check=True, capture_output=True)
        
        # Instala requirements
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements_hibrido.txt'
        ], check=True, capture_output=True)
        
        print("‚úÖ Pacotes Python instalados")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na instala√ß√£o: {e}")
        return False

def check_r_installation():
    """Verifica instala√ß√£o do R"""
    print("üìä Verificando R...")
    
    try:
        result = subprocess.run(['R', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ R instalado")
            return True
        else:
            print("‚ùå R n√£o encontrado")
            return False
    except FileNotFoundError:
        print("‚ùå R n√£o encontrado")
        return False

def install_r_packages():
    """Instala pacotes R"""
    print("üì¶ Instalando pacotes R...")
    
    if not check_r_installation():
        print("‚ö†Ô∏è R n√£o dispon√≠vel. Pulando instala√ß√£o de pacotes R.")
        return True
    
    try:
        # Executa script de instala√ß√£o R
        if Path('install_r_dependencies.R').exists():
            subprocess.run(['Rscript', 'install_r_dependencies.R'], check=True)
            print("‚úÖ Pacotes R instalados")
        else:
            print("‚ö†Ô∏è Script de instala√ß√£o R n√£o encontrado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na instala√ß√£o R: {e}")
        return False

def test_imports():
    """Testa importa√ß√µes principais"""
    print("üß™ Testando importa√ß√µes...")
    
    packages = [
        'streamlit',
        'pandas', 
        'numpy',
        'plotly',
        'geopandas',
        'folium',
        'statsmodels',
        'sklearn',
        'xgboost'
    ]
    
    failed = []
    for package in packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            failed.append(package)
    
    if failed:
        print(f"\nüí° Pacotes com erro: {failed}")
        return False
    
    return True

def create_config_file():
    """Cria arquivo de configura√ß√£o"""
    print("‚öôÔ∏è Criando arquivo de configura√ß√£o...")
    
    config = {
        "project_name": "An√°lise Preditiva de Viol√™ncia - Rio de Janeiro",
        "version": "1.0.0",
        "python_version": sys.version,
        "directories": {
            "data": "data/",
            "models": "data/models/",
            "cache": "data/r_cache/",
            "outputs": "outputs/"
        },
        "models": {
            "traditional": ["ARIMA", "SARIMA", "Prophet", "Exp Smoothing"],
            "ml": ["Random Forest", "XGBoost", "Gradient Boosting"],
            "deep": ["LSTM"],
            "ensemble": ["Weighted Ensemble"]
        },
        "cache": {
            "ttl_hours": 24,
            "max_size_mb": 100
        }
    }
    
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print("‚úÖ config.json criado")
    return True

def test_system():
    """Testa sistema completo"""
    print("üî¨ Testando sistema...")
    
    # Testa Streamlit
    try:
        import streamlit as st
        print("‚úÖ Streamlit OK")
    except ImportError:
        print("‚ùå Streamlit n√£o dispon√≠vel")
        return False
    
    # Testa modelos
    try:
        from statsmodels.tsa.arima.model import ARIMA
        print("‚úÖ Statsmodels OK")
    except ImportError:
        print("‚ùå Statsmodels n√£o dispon√≠vel")
        return False
    
    # Testa ML
    try:
        from sklearn.ensemble import RandomForestRegressor
        print("‚úÖ Scikit-learn OK")
    except ImportError:
        print("‚ùå Scikit-learn n√£o dispon√≠vel")
        return False
    
    return True

def create_startup_script():
    """Cria script de inicializa√ß√£o"""
    print("üöÄ Criando script de inicializa√ß√£o...")
    
    startup_content = '''#!/bin/bash
# Script de inicializa√ß√£o do sistema

echo "üîÆ Iniciando Sistema de An√°lise Preditiva..."
echo "=========================================="

# Ativa ambiente virtual se existir
if [ -d "venv" ]; then
    source venv/bin/activate
    echo "‚úÖ Ambiente virtual ativado"
fi

# Executa Streamlit
echo "üöÄ Executando Streamlit..."
streamlit run Home.py
'''
    
    with open('start.sh', 'w') as f:
        f.write(startup_content)
    
    # Torna execut√°vel
    os.chmod('start.sh', 0o755)
    
    print("‚úÖ start.sh criado")
    return True

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Setup completo do sistema")
    parser.add_argument("--skip-r", action="store_true", help="Pular instala√ß√£o R")
    parser.add_argument("--force", action="store_true", help="For√ßar reinstala√ß√£o")
    parser.add_argument("--test-only", action="store_true", help="Apenas testar")
    
    args = parser.parse_args()
    
    print_header()
    
    if args.test_only:
        # Apenas testes
        if not test_imports():
            return 1
        if not test_system():
            return 1
        print("\n‚úÖ Todos os testes passaram!")
        return 0
    
    # Verifica√ß√µes b√°sicas
    if not check_python_version():
        return 1
    
    # Cria estrutura
    if not create_directories():
        return 1
    
    if not check_requirements_file():
        return 1
    
    # Instala depend√™ncias
    if not install_python_packages():
        return 1
    
    # R (opcional)
    if not args.skip_r:
        if not install_r_packages():
            print("‚ö†Ô∏è Continuando sem R...")
    
    # Testes
    if not test_imports():
        return 1
    
    if not test_system():
        return 1
    
    # Configura√ß√£o
    if not create_config_file():
        return 1
    
    if not create_startup_script():
        return 1
    
    # Sucesso
    print("\n" + "=" * 60)
    print("üéâ SETUP COMPLETO COM SUCESSO!")
    print("=" * 60)
    print()
    print("üìå PR√ìXIMOS PASSOS:")
    print("1. Execute: python run.py")
    print("2. Ou: streamlit run Home.py")
    print("3. Ou: ./start.sh (Linux/Mac)")
    print()
    print("üåê O sistema estar√° dispon√≠vel em: http://localhost:8501")
    print()
    print("üìö Documenta√ß√£o: README.md")
    print("üîß Configura√ß√£o: config.json")
    print()
    print("‚úÖ Sistema pronto para uso!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

